<?xml version="1.0" encoding="utf-8"?>
<xs:schema 
  attributeFormDefault="unqualified" 
  elementFormDefault="qualified" 
  targetNamespace="https://github.com/banban525/ApplicationRegistries/schemas/1.0.0/ApplicationRegistryDefine.xsd"
  xmlns="https://github.com/banban525/ApplicationRegistries/schemas/1.0.0/ApplicationRegistryDefine.xsd"
  xmlns:xs="http://www.w3.org/2001/XMLSchema">
  
  <xs:element name="ApplicationRegistryDefine">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" name="Entry">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Description" type="xs:string">
                <xs:annotation>
                  <xs:documentation>Description for configuration value</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:choice maxOccurs="1">
                <xs:element ref="Registry"/>
                <xs:element ref="StaticValue"/>
                <xs:element ref="CommandLineArgument"/>
                <xs:element ref="EnvironmentVariable"/>                
              </xs:choice>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required">
              <xs:annotation>
                <xs:documentation>ID for configuration value. It is unique and starts with alphabet. It used Property name in wrapper class.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Type" type="TypeEnum" use="required">
              <xs:annotation>
                <xs:documentation>Configuration value's type. int or string or bool.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
    <xs:unique name="id_unique">
      <xs:selector xpath="Entry"/>
      <xs:field xpath="@id"/>
    </xs:unique>
  </xs:element>

  <xs:element name="Registry">
    <xs:annotation>
      <xs:documentation>Reference to Windows Registry</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Key" type="xs:string" >
          <xs:annotation>
            <xs:documentation>Registry key that start with (HKEY_CURRENT_USER\ or HKEY_LOCAL_MACHINE\, HKEY_CLASSES_ROOT\).</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Registry name</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="DefaultValue" type="xs:string">
          <xs:annotation>
            <xs:documentation>This value returned if registry key is not found.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="StaticValue">
    <xs:annotation>
      <xs:documentation>Return const value</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Value" type="xs:string">
          <xs:annotation>
            <xs:documentation>Const value</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CommandLineArgument">
    <xs:annotation>
      <xs:documentation>Reference to command line arguments.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ArgumentName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Search keyword in commandline arguments. For example /Output or -Input. Return the following values ​​of this. </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Pattern" type="xs:string" maxOccurs="1" minOccurs="0">
          <xs:annotation>
            <xs:documentation></xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="DefaultValue" type="xs:string">
          <xs:annotation>
            <xs:documentation>This value returned if ArgumentName is not found.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="ignoreCase" type="xs:boolean" use="required">
        <xs:annotation>
          <xs:documentation>Ignore case</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="type" type="CommandLineType" use="optional" default="useNextValue">
        <xs:annotation>
          <xs:documentation></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="EnvironmentVariable">
    <xs:annotation>
      <xs:documentation>Reference to Environment Variable</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="VariableName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Environment varialble name</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="DefaultValue" type="xs:string">
          <xs:annotation>
            <xs:documentation>This value returned if VariableName is not found.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name="TypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="string"/>
      <xs:enumeration value="int"/>
      <xs:enumeration value="bool"/>
      <xs:enumeration value="string[]"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CommandLineType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="useNextValue"/>
      <xs:enumeration value="hasArgument"/>
      <xs:enumeration value="parsePattern"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>